package in.co.mark.webservices.contacts.domain.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import in.co.mark.common.domain.model.OwnerSpecificModelBase;

public class ContactMethodType extends OwnerSpecificModelBase {
	/**
	 * The <i>primary key</i> of this entity. It will be generated by the DB system
	 * on successful creation of the respective record.
	 */
	private long id;
	private boolean isOwnerOrg;
	private long contactMethothCategoryId;
	private String contactMethodType;
	private String desc;

	/**
	 * Default constructor
	 */
	public ContactMethodType() {

	}

	/**
	 * Initializes {@code ownerId}, {@code categoryName}, and {@code desc}
	 * properties of this instance
	 * 
	 * @param ownerId           ID of the owner - can be a user or an organization
	 * @param contactMethCatId  ID of the contact method category
	 * @param contactMethodType Contact method type name. For example, Personal
	 *                          Phone, Work Email, etc.
	 * @param desc              Description of this category
	 */
	public ContactMethodType(long ownerId, long contactMethCatId, String contactMethodType, String desc) {
		super(ownerId);
		this.contactMethothCategoryId = contactMethCatId;
		this.contactMethodType = contactMethodType;
		this.desc = desc;
	}

	/**
	 * Initializes {@code ownerId}, {@code isOwnerOrg}, {@code categoryName}, and
	 * {@code desc} properties of this instance
	 * 
	 * @param ownerId           ID of the owner - can be a user or an organization
	 * @param isOwnerOrg        Set to {@code true}, if the owner of this instance
	 *                          represented by {@code ownerId} is an organization;
	 *                          otherwise, {@code false}
	 * @param contactMethCatId  ID of the contact method category
	 * @param contactMethodType Contact method type name. For example, Personal
	 *                          Phone, Work Email, etc.
	 * @param desc              Description of this category
	 */
	public ContactMethodType(long ownerId, boolean isOwnerOrg, long contactMethCatId, String contactMethodType,
			String desc) {
		super(ownerId);
		this.isOwnerOrg = isOwnerOrg;
		this.contactMethothCategoryId = contactMethCatId;
		this.contactMethodType = contactMethodType;
		this.desc = desc;
	}

	/**
	 * Initializes all properties of this instance
	 * 
	 * @param id                DB ID of this instance
	 * @param ownerId           ID of the owner - can be a user or an organization
	 * @param isOwnerOrg        Set to {@code true}, if the owner of this instance
	 *                          represented by {@code ownerId} is an organization;
	 *                          otherwise, {@code false}
	 * @param contactMethCatId  ID of the contact method category
	 * @param contactMethodType Contact method type name. For example, Personal
	 *                          Phone, Work Email, etc.
	 * @param desc              Description of this category
	 * @param createdOn         A timestamp indicating when the respective DB record
	 *                          was created
	 * @param lastUpdatedOn     A timestamp indicating when the respective DB record
	 *                          was last updated
	 */
	public ContactMethodType(long id, long ownerId, boolean isOwnerOrg, long contactMethCatId, String contactMethodType,
			String desc, long createdOn, long lastUpdatedOn) {
		super(ownerId, createdOn, lastUpdatedOn);
		this.id = id;
		this.isOwnerOrg = isOwnerOrg;
		this.contactMethodType = contactMethodType;
		this.desc = desc;
	}

	/**
	 * To get the ID of this instance
	 * 
	 * @return {@code id} of this instance
	 */
	public long getId() {
		return id;
	}

	/**
	 * To set the ID of this instance.
	 * <p>
	 * The {@code id} being <i>primary key</i> of entities, it should, ideally, be
	 * set by the DB system on successful creation of the respective record.
	 * </p>
	 * 
	 * @param id ID of this instance
	 */
	public void setId(long id) {
		this.id = id;
	}

	/**
	 * To check if the owner of this instance represented by {@code ownerId} is an
	 * organization or not.
	 * 
	 * @return {@code true}, if the owner of this instance represented by
	 *         {@code ownerId} is an organization; otherwise, {@code false}
	 */
	@JsonProperty(value = "isOwnerOrg")
	public boolean isOwnerOrg() {
		return isOwnerOrg;
	}

	/**
	 * To set a {@code boolean} indicating whether the owner of this instance
	 * represented by {@code ownerId} is an organization or not.
	 * 
	 * @param isOwnerOrg Set to {@code true}, if the owner of this instance
	 *                   represented by {@code ownerId} is an organization;
	 *                   otherwise, {@code false}
	 */
	public void setOwnerOrg(boolean isOwnerOrg) {
		this.isOwnerOrg = isOwnerOrg;
	}

	/**
	 * To get the ID of the associated contact method category
	 * 
	 * @return {@code contactMethothCategoryId} value
	 */
	public long getContactMethothCategoryId() {
		return contactMethothCategoryId;
	}

	/**
	 * To set ID of the associated contact method category
	 * 
	 * @param contactMethothCategoryId ID of the associated contact method category
	 */
	public void setContactMethothCategoryId(long contactMethothCategoryId) {
		this.contactMethothCategoryId = contactMethothCategoryId;
	}

	/**
	 * To get the name of this contact method type
	 * 
	 * @return {@code contactMethodType} value
	 */
	public String getContactMethodType() {
		return contactMethodType;
	}

	/**
	 * To set an name to this contact method type
	 * 
	 * @param contactMethodType A contact method type name
	 */
	public void setContactMethodType(String contactMethodType) {
		this.contactMethodType = contactMethodType;
	}

	/**
	 * To get the description of this contact method type
	 * 
	 * @return {@code desc} value
	 */
	public String getDesc() {
		return desc;
	}

	/**
	 * To set the description of this contact method type
	 * 
	 * @param desc Description of this contact method type
	 */
	public void setDesc(String desc) {
		this.desc = desc;
	}
}
