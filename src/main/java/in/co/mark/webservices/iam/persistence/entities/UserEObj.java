package in.co.mark.webservices.iam.persistence.entities;

import java.time.Instant;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Entity(name = "users")
public class UserEObj {
	/**
	 * The <i>primary key</i> of this entity. It will be auto-generated by the DB
	 * system on successful creation of the respective record.
	 */
	@Getter
	@Setter
	@Id
	private long id;

	@Getter
	@Setter
	@Column(name = "initial")
	private String initial;

	@Getter
	@Setter
	@Column(name = "first_name")
	private String firstName;

	@Getter
	@Setter
	@Column(name = "middle_name")
	private String middleName;

	@Getter
	@Setter
	@Column(name = "last_name")
	private String lastName;
	@Getter
	@Setter
	@Column(name = "display_name")
	private String displayName;

	/**
	 * Possible values of gender are: <b>M</b> - Male, <b>F</b> - Female, and
	 * <b>O</b> - Other.
	 */
	@Getter
	@Setter
	@Column(name = "gender", nullable = true)
	private String gender;

	/**
	 * Date part of the date of birth of this user
	 */
	@Getter
	@Setter
	@Column(name = "dob_date")
	private int dobDate;

	/**
	 * Month part of the date of birth of this user
	 */
	@Getter
	@Setter
	@Column(name = "dob_month")
	private int dobMonth;

	/**
	 * Year part of the date of birth of this user
	 */
	@Getter
	@Setter
	@Column(name = "dob_year")
	private int dobYear;

	@Getter
	@Setter
	@Column(name = "email", nullable = false)
	private String email;

	@Getter
	@Setter
	@Column(name = "avatar_uri")
	private String avatarUri;

	@Getter
	@Setter
	@Column(name = "created_on", nullable = false)
	private long createdOn;

	@Getter
	@Setter
	@Column(name = "last_updated_on", nullable = false)
	private long lastUpdatedOn;

	@PrePersist
	public void prePersist() {
		long currTimeMilli = Instant.now().toEpochMilli();
		createdOn = currTimeMilli;
		lastUpdatedOn = currTimeMilli;
	}

	@PreUpdate
	public void preUpdate() {
		lastUpdatedOn = Instant.now().toEpochMilli();
	}
}
